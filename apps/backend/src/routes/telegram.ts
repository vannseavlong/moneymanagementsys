import { Router } from 'express';
import { z } from 'zod';

const router = Router();

// Validation schema
const telegramMessageSchema = z.object({
  chatId: z.string(),
  message: z.string(),
  parseMode: z.enum(['HTML', 'Markdown']).optional()
});

// Send message to Telegram
router.post('/send', async (req, res) => {
  try {
    const { chatId, message, parseMode } = telegramMessageSchema.parse(req.body);
    const botToken = process.env.TELEGRAM_BOT_TOKEN;

    if (!botToken) {
      return res.status(500).json({ error: 'Telegram bot token not configured' });
    }

    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: parseMode || 'Markdown'
      })
    });

    const data = await response.json();
    
    if (data.ok) {
      res.json({ success: true, messageId: data.result.message_id });
    } else {
      console.error('Telegram API error:', data);
      res.status(400).json({ error: 'Failed to send message to Telegram', details: data });
    }
  } catch (error) {
    console.error('Telegram send error:', error);
    if (error instanceof z.ZodError) {
      return res.status(400).json({ error: 'Invalid data format', details: error.errors });
    }
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Format budget summary for Telegram
router.post('/send-budget-summary', async (req, res) => {
  try {
    const { budgetData, chatId } = req.body;
    
    if (!budgetData || !chatId) {
      return res.status(400).json({ error: 'Budget data and chat ID required' });
    }

    // Calculate totals
    const totalSpending = budgetData.items.reduce((sum: number, item: any) => {
      const amount = item.currency === budgetData.currency 
        ? item.amount 
        : item.currency === 'USD' && budgetData.currency === 'KHR'
          ? item.amount * 4100
          : item.currency === 'KHR' && budgetData.currency === 'USD'
            ? item.amount / 4100
            : item.amount;
      return sum + amount;
    }, 0);

    const remaining = budgetData.totalIncome - totalSpending;

    // Format message
    let message = `💰 *Monthly Budget Summary*\n\n`;
    message += `📅 *Month:* ${budgetData.month}\n`;
    message += `💵 *Total Income:* ${budgetData.totalIncome.toLocaleString()} ${budgetData.currency}\n\n`;
    
    message += `🛒 *Expenses:*\n`;
    budgetData.items.forEach((item: any, index: number) => {
      message += `${index + 1}. ${item.name}: ${item.amount.toLocaleString()} ${item.currency}`;
      if (item.category) {
        message += ` (${item.category})`;
      }
      message += `\n`;
    });
    
    message += `\n💸 *Total Spending:* ${totalSpending.toLocaleString()} ${budgetData.currency}\n`;
    message += `💰 *Remaining:* ${remaining.toLocaleString()} ${budgetData.currency}\n\n`;
    
    if (remaining < 0) {
      message += `⚠️ *Warning:* You've exceeded your budget by ${Math.abs(remaining).toLocaleString()} ${budgetData.currency}!\n`;
    } else if (remaining < budgetData.totalIncome * 0.1) {
      message += `💡 *Tip:* You're running low on budget. Consider reviewing your expenses.\n`;
    }

    message += `\n📊 Generated by MMMS - ${new Date().toLocaleDateString()}`;

    // Send to Telegram
    const sendResponse = await fetch(`${req.protocol}://${req.get('host')}/api/telegram/send`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chatId,
        message,
        parseMode: 'Markdown'
      })
    });

    const result = await sendResponse.json();
    res.json(result);
  } catch (error) {
    console.error('Budget summary send error:', error);
    res.status(500).json({ error: 'Failed to send budget summary' });
  }
});

export { router as telegramRouter };